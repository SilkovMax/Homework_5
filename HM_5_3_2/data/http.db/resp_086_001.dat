347
<HTML><HEAD>
<TITLE>Руководство полного идиота по программированию (на языке Си)</TITLE>

<META content="text/html; charset=windows-1251" http-equiv=Content-Type>
<meta name="KeyWords" content="Язык программирования с++, идиот, Переменная, текущее значение, начало, оператор, новичок, действие, начинающий, помощь, левая часть, правая, объявление, программа, индекс, index, иначе, if, for, else, пример, последовательность, функция, табуляция, ошибка, определение, return, истинно, ложно, true, false, print, main, void, массив">
<meta name="Robots" content="all">
<meta name="Description" content="WWW.HELLOWORLD.RU : Aндрей Богатырев. Руководство полного идиота по программированию (на языке Си)">
<meta name="Document-state" content="Static">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../../../../elib.css">

</head>



1fbd
<body bgcolor="white" topmargin="0" bottommargin="0" leftmargin="0" rightmargin="0">



<table border="0" cellPadding="0" cellSpacing="0" width="100%" height="145">

<tr>

<td style="background: url('/img/bg_1.gif') repeat-x left top;" valign="top">

<table border="0" cellPadding="0" cellSpacing="0" width="100%" height="30">

<tr>

<td background="/img/bg_2.gif" width="50" align="right" valign="top">

<a href="https://helloworld.ru/"><img src="/img/home.gif" width="23" height="26" border="0" alt="Перейти на главную"></a>&nbsp;&nbsp;&nbsp;</td>

<td background="/img/bg_2.gif" width="143">

<table border="0" cellPadding="0" cellSpacing="0" width="143" height="30">

<tr>

<td background="/img/bg_3.gif" width="134"> </td>

<td width="9"> </td>

</tr>

</table></td>

<td width="10"> </td>

<td background="/img/bg_4.gif">&nbsp;</td>

<td width="325" align="center">

helloworld.ru - документация и книги по программированию</td>

<td background="/img/bg_4.gif" width="12">&nbsp;</td>

<td width="10"> </td>

</tr>

</table>

<table border="0" cellPadding="0" cellSpacing="0" width="100%" height="85">

<tr>

<td width="260" height="85" align="center">
<a href=https://helloworld.ru><img src="/img/logo.gif" width="240" height="47" alt="helloworld.ru - документация и книги по программированию" border=0></a>
</td>

<td align="right">

<a href="http://fe.ru" target="_blank" rel="nofollow" border="0"><img src=/img/fe.ru.png></a>
</tr>

</table>

<table border="0" cellPadding="0" cellSpacing="0" width="100%" height="30">

<tr>

<td>

&nbsp;&nbsp;&nbsp; <a href="/" class="top"><img src="/img/str.gif" width="15" height="8" border="0">главная</a>


&nbsp;&nbsp;&nbsp; <a href="http://hosthost.biz/" rel="nofollow" class="top"><img src="/img/str.gif" width="15" height="8" border="0">хостинг</a>

&nbsp;&nbsp;&nbsp; 

<SCRIPT language=JavaScript>

        var at=' ';

        at += '<a hr';

        at += 'ef="mailto:webmaster';

        at += '@hell';

        at += 'oworld.ru" class="top">';

        at += '<img src="/img/str.gif" width="15" height="8" border="0">контакты</a></a>';

        document.write(at);

        </SCRIPT>

</td>

<td align="right">

<table border="0" cellPadding="0" cellSpacing="0">

<tr>

<td>

Поиск по сайту: &nbsp;</td>

<form ACTION="/cgi-bin/search.pl" METHOD="GET">

<td>

<INPUT TYPE="Text" style="width:200px;" NAME="query" >

<INPUT TYPE="Hidden" NAME="stpos" VALUE="0" >

<td valign="top">

<input type="image" src="/img/search.gif" width="16" height="20"></td>

<td width="10"> </td>

</form>

</tr>

</table></td>

</tr>

</table></td>

</tr>

</table>

<table border="0" cellPadding="0" cellSpacing="0" width="100%">

<tr>

<td width="192" bgcolor="#F8F8F8" valign="top">

<table border="0" cellPadding="0" cellSpacing="0" width="192">

<tr>

<td height="10"> </td>

</tr>

<tr>

<td height="24" background="/img/bg_5.gif" class="wh">

<img src="/img/str_2.gif" width="40" height="16" align="absmiddle"><b>Смотрите также</b>

</td>

</tr>

<tr>

<td style="padding:10px;">



<nobr><a href=http://helloworld.ru/show.php?curraz=1&prev=0><img src="/img/str.gif" width="15" height="8" border="0"><b>Языки программирования</b></a></nobr><br>
<a href=http://helloworld.ru/show.php?curraz=39&prev=0><img src="/img/str.gif" width="15" height="8" border="0">C#</a><br>
<a href=http://helloworld.ru/show.php?curraz=22&prev=0><img src="/img/str.gif" width="15" height="8" border="0">MS Visual C++</a><br>
<a href=http://helloworld.ru/show.php?curraz=24&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Borland C++</a><br>
<a href=http://helloworld.ru/show.php?curraz=23&prev=0><img src="/img/str.gif" width="15" height="8" border="0">C++ Builder</a><br>
<a href=http://helloworld.ru/show.php?curraz=26&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Visual Basic</a><br>
<a href=http://helloworld.ru/show.php?curraz=27&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Quick Basic</a><br>
<a href=http://helloworld.ru/show.php?curraz=30&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Turbo Pascal</a><br>
<a href=http://helloworld.ru/show.php?curraz=25&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Delphi</a><br>
<a href=http://helloworld.ru/show.php?curraz=33&prev=0><img src="/img/str.gif" width="15" height="8" border="0">JavaScript</a><br>
<a href=http://helloworld.ru/show.php?curraz=34&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Java</a><br>
<a href=http://helloworld.ru/show.php?curraz=28&prev=0><img src="/img/str.gif" width="15" height="8" border="0">PHP</a><br>
<a href=http://helloworld.ru/show.php?curraz=29&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Perl</a><br>
<a href=http://helloworld.ru/show.php?curraz=31&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Assembler</a><br>
<a href=http://helloworld.ru/show.php?curraz=35&prev=0><img src="/img/str.gif" width="15" height="8" border="0">AutoLisp</a><br>
<a href=http://helloworld.ru/show.php?curraz=32&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Fortran</a><br>
<a href=http://helloworld.ru/show.php?curraz=36&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Python</a><br>
<a href=http://helloworld.ru/show.php?curraz=67&prev=0><img src="/img/str.gif" width="15" height="8" border="0">1C</a><br>
<br><nobr><a href=http://helloworld.ru/show.php?curraz=2&prev=0><img src="/img/str.gif" width="15" height="8" border="0"><b>Интернет-технологии</b></a></nobr><br>
<a href=http://helloworld.ru/show.php?curraz=37&prev=0><img src="/img/str.gif" width="15" height="8" border="0">HTML</a><br>
<a href=http://helloworld.ru/show.php?curraz=38&prev=0><img src="/img/str.gif" width="15" height="8" border="0">VRML</a><br>
<a href=http://helloworld.ru/show.php?curraz=49&prev=0><img src="/img/str.gif" width="15" height="8" border="0">HTTP</a><br>
<a href=http://helloworld.ru/show.php?curraz=41&prev=0><img src="/img/str.gif" width="15" height="8" border="0">CGI</a><br>
<a href=http://helloworld.ru/show.php?curraz=51&prev=0><img src="/img/str.gif" width="15" height="8" border="0">FTP</a><br>
<a href=http://helloworld.ru/show.php?curraz=52&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Proxy</a><br>
<a href=http://helloworld.ru/show.php?curraz=53&prev=0><img src="/img/str.gif" width="15" height="8" border="0">DNS</a><br>
<a href=http://helloworld.ru/show.php?curraz=50&prev=0><img src="/img/str.gif" width="15" height="8" border="0">протоколы TCP/IP</a><br>
<a href=http://helloworld.ru/show.php?curraz=65&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Apache</a><br>
<br><nobr><a href=http://helloworld.ru/show.php?curraz=4&prev=0><img src="/img/str.gif" width="15" height="8" border="0"><b>Web-дизайн</b></a></nobr><br>
<a href=http://helloworld.ru/show.php?curraz=37&prev=0><img src="/img/str.gif" width="15" height="8" border="0">HTML</a><br>
<a href=http://helloworld.ru/show.php?curraz=40&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Дизайн</a><br>
<a href=http://helloworld.ru/show.php?curraz=38&prev=0><img src="/img/str.gif" width="15" height="8" border="0">VRML</a><br>
<a href=http://helloworld.ru/show.php?curraz=42&prev=0><img src="/img/str.gif" width="15" height="8" border="0">PhotoShop</a><br>
<a href=http://helloworld.ru/show.php?curraz=43&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Cookie</a><br>
<a href=http://helloworld.ru/show.php?curraz=41&prev=0><img src="/img/str.gif" width="15" height="8" border="0">CGI</a><br>
<a href=http://helloworld.ru/show.php?curraz=44&prev=0><img src="/img/str.gif" width="15" height="8" border="0">SSI</a><br>
<a href=http://helloworld.ru/show.php?curraz=45&prev=0><img src="/img/str.gif" width="15" height="8" border="0">CSS</a><br>
<a href=http://helloworld.ru/show.php?curraz=46&prev=0><img src="/img/str.gif" width="15" height="8" border="0">ASP</a><br>
<a href=http://helloworld.ru/show.php?curraz=28&prev=0><img src="/img/str.gif" width="15" height="8" border="0">PHP</a><br>

1140
<a href=http://helloworld.ru/show.php?curraz=29&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Perl</a><br>
<br><nobr><a href=http://helloworld.ru/show.php?curraz=5&prev=0><img src="/img/str.gif" width="15" height="8" border="0"><b>Программирование игр</b></a></nobr><br>
<a href=http://helloworld.ru/show.php?curraz=54&prev=0><img src="/img/str.gif" width="15" height="8" border="0">DirectDraw</a><br>
<a href=http://helloworld.ru/show.php?curraz=56&prev=0><img src="/img/str.gif" width="15" height="8" border="0">DirectSound</a><br>
<a href=http://helloworld.ru/show.php?curraz=55&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Direct3D</a><br>
<a href=http://helloworld.ru/show.php?curraz=57&prev=0><img src="/img/str.gif" width="15" height="8" border="0">OpenGL</a><br>
<a href=http://helloworld.ru/show.php?curraz=58&prev=0><img src="/img/str.gif" width="15" height="8" border="0">3D-графика</a><br>
<a href=http://helloworld.ru/show.php?curraz=59&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Графика под DOS</a><br>
<br><nobr><a href=http://helloworld.ru/show.php?curraz=6&prev=0><img src="/img/str.gif" width="15" height="8" border="0"><b>Алгоритмы</b></a></nobr><br>
<a href=http://helloworld.ru/show.php?curraz=60&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Численные методы</a><br>
<a href=http://helloworld.ru/show.php?curraz=62&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Обработка данных</a><br>
<br><nobr><a href=http://helloworld.ru/show.php?curraz=7&prev=0><img src="/img/str.gif" width="15" height="8" border="0"><b>Сис. программирование</b></a></nobr><br>
<a href=http://helloworld.ru/show.php?curraz=61&prev=0><img src="/img/str.gif" width="15" height="8" border="0">Драйверы</a><br>
<br><nobr><a href=http://helloworld.ru/show.php?curraz=10&prev=0><img src="/img/str.gif" width="15" height="8" border="0"><b>Базы данных</b></a></nobr><br>
<a href=http://helloworld.ru/show.php?curraz=64&prev=0><img src="/img/str.gif" width="15" height="8" border="0">MySQL</a><br>
<a href=http://helloworld.ru/show.php?curraz=66&prev=0><img src="/img/str.gif" width="15" height="8" border="0">SQL</a><br>
<br><nobr><a href=http://helloworld.ru/show.php?curraz=8&prev=0><img src="/img/str.gif" width="15" height="8" border="0"><b>Другое</b></a></nobr><br>
<br><nobr><a href=http://helloworld.ru/show.php?curraz=68&prev=0><img src="/img/str.gif" width="15" height="8" border="0"><b>Хостинг</b></a></nobr><br>
<br>



<br>



</td>

</tr>

<tr>

<td height="24" background="/img/bg_5.gif" class="wh">

<img src="/img/str_2.gif" width="40" height="16" align="absmiddle"><b>Друзья</b>

</td>

</tr>

<tr>

<td style="padding:10px;">



<a href="http://demaker.ru" alt="Как делать дизайн?">demaker.ru</a>



<br>



</td>

</tr>

<tr>

<td height="24" background="/img/bg_5.gif" class="wh">

<img src="/img/str_2.gif" width="40" height="16" align="absmiddle"><b>Реклама</b>

</td>

</tr>

<tr>

<td style="padding:10px;">





<br><center>

<!-- HOSTHOST.BIZ 100x100 --><a href=http://www.hosthost.biz rel="nofollow" target='_blank'><img src='/banners/hosthost/100.gif' width=100 height=100 Alt='Лучший хостинг. Аренда серверов' border=0></a><!-- /hosthost.biz 100x100 -->

<br><br>

<div id="teaser_3"><a href="https://ad.pbe.ru/" rel="nofollow">Рекламная сеть</a></div>
<script type="text/javascript">document.write('<scr'+'ipt type="text/jav'+'ascript" src="https://ad.pbe.ru/show/?block_id=3&r='+escape(document.referrer)+'&'+Math.round(Math.random()*100000)+'"></scr'+'ipt>');</script>


<br><br>

<table width=95% cellpadding=5 cellspacing=1 border=0 bgcolor=#D5EFFF><tr bgcolor=#F8F8F8><td align=center>
<script type="text/javascript">
<!--
var _acic={dataProvider:10};(function(){var e=document.createElement("script");e.type="text/javascript";e.async=true;e.src="//www.acint.net/aci.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})()
//-->
</script>
</td></tr></table>

<br>


</center>


</td>

</tr>

</table></td>

<td width="1" bgcolor="#E4E4E4"> </td>

<td style="padding:10px; background: url('/img/bg_7.gif') no-repeat right bottom;" valign="top">



<table border="0" cellPadding="5" cellSpacing="0" width="100%">

<tr>

<td style="border: 1px solid #E4E4E4;" bgcolor="#F2F2F2">

<a href="https://helloworld.ru">helloworld.ru</a>

</td>

</tr>

</table>
aa29


<center><h2>Руководство полного идиота по программированию (на языке Си)</h2></center>
<center>Aндрей Богатырев</center>

<center><table width=620><tr><td>
<P><PRE>
     ПЕРЕМЕННЫЕ

Переменная - это такой "ящичек" с именем,
в котором может храниться некое ЗНАЧЕНИЕ.
Имя у переменной постоянно и неизменно,
значение же может меняться.

Например, пусть у нас есть переменная с именем "x".

        -----
       / x /
     ---------------
     | Текущее     |
     | значение,   |
     | например 12 |
     ---------------

Переменную можно изменять при помощи операции ПРИСВАИВАНИЯ.
В языке Си она обозначается знаком равенства.

        x = 12  ;

Это читается не как "икс равно 12",
а как "присвоить переменной икс значение 12",
то есть "Положить в ящик с надписью ИКС число 12".

Такая строка является простейшим ОПЕРАТОРОМ,
то есть ДЕЙСТВИЕМ. В конце операторов ставится точка с запятой.

Рассмотрим оператор

        x = x + 3;

Это не уравнение. Если рассматривать эту строку как математическое
уравнение, оно не имеет решений. На самом деле тут написано:

        1) "взять значение переменной ИКС"
        2) "прибавить к нему 3"
        3) "положить новое значение в переменную ИКС",
            стерев   в ней прежнее значение.

У опреатора присваивания есть две части: ЛЕВАЯ и ПРАВАЯ.

        ЛЕВАЯ_ЧАСТЬ = ПРАВАЯ_ЧАСТЬ ;

В левой части обычно стоит просто имя переменной В КОТОРУЮ
записывается вычисленный справа результат.

Если имя переменной встречается в ПРАВОЙ части, то это
означает "подставить сюда текущее значение этой переменной".

При этом текущее значение самой переменной НЕ изменяется,
берется его копия. То есть, "вынутое из ящика значение"
не оставляет ящик пустым! Вынимается копия, другая копия остается в ящике.

Итак:

        x = x + 3 ;

Пусть сейчас значение x есть 12

Сначала вычисляется ПРАВАЯ часть оператора присваивания.

                x + 3

        -----
       / x /
     ---------------
     |  12   |     |
     --------|------
             |
             |
             | ВЗЯТЬ копию значения (то есть число 12) из ящика с именем "ИКС"
             |
             V
         Вместо x
         подставляем
           число
            12    +    3    ----&gt;   СКЛАДЫВАЕМ.

                                    Сложение дает 15.
                                    В этот момент x все еще равно 12
                                    (в ящике лежит число 12)

Теперь вычисляется само присваивание:

        x = 15 ;

             |
             |
             | ПОЛОЖИТЬ результат в ящик с именем "ИКС"
             | (истребив в нем прежнее значение, если было)
        -----|
       / x / |
     --------|------
     |  12   V     |
     ---------------

Стало:
        -----
       / x /
     ---------------
     |  15         |
     ---------------

В переменной с тем же именем теперь находится новое значение,
она изменилась. Потому и "переменная".

В некоторых языках программирования, например в Pascal или Modula,
операция присваивания обозначается символом :=  а не =
Это уменьшает путаницу, но к смыслу = можно привыкнуть довольно быстро.
Не огорчайтесь.

В правой части значение переменной может использоваться несколько раз:

        z = x * x + 2 * x;

Тут есть две переменные:

        z - для результата.
        x - уже имеющая какое-то значение.

        x * x означает "умножить икс на икс" (при этом само значение,
              лежащее в ящике икс не изменяется!)

        x * 2 означает "взять два значения икс"

        +     означает сложение.

Переменные надо ОБЪЯВЛЯТЬ.
Это необходимо потому, что иначе, если бы переменные вводились просто
использованием имени переменной, и мы вдруг допустили бы ОПЕЧАТКУ, например:

        иднекс = 1;

вместо

        индекс = 1;

то у нас появилась бы "лишняя" переменная "иднекс", а ожидаемое действие не
произошло бы. Такую ошибку найти черезвычайно тяжело. Если же переменные
надо объявлять, то необъявленные переменные будут выявлены еще на стадии
компиляции программы.

Переменные, которые будут хранить целые числа ( ..., -2, -1, 0, 1, 2, 3, ...),
объявляют так:

        int переменная1;
        int переменная2;

Или сразу несколько в одной строке:

        int переменная1, переменная2;

int означает сокращение от слова integer - "целый".

     ПРОГРАММА

Программа состоит из ОПЕРАТОРОВ, то есть действий.
Операторы выполняются последовательно в том порядке,
в котором они записаны.

        /* ОБЪЯВЛЯЕМ ДВЕ ПЕРЕМЕННЫЕ */
        int x, y;      /* 0 */

        /* Это еще не операторы, хотя при этом создаются 2 ящика для
           целых чисел
         */

        /* А ТЕПЕРЬ - ОПЕРАТОРЫ. */
        /* Мы начнем с простых операторов присваивания и арифметики */

        x = 3;          /* 1 */
        y = 4;          /* 2 */
        x = x + y;      /* 3 */
        y = y - 1;      /* 4 */
        x = y;          /* 5 */

Значения переменных (то, что лежит в ящиках) меняются таким образом:

                           x       y
/* 0 */                 мусор   мусор

/* после 1 */           3       мусор
/* после 2 */           3       4
/* после 3 */           7       4
/* после 4 */           7       3
/* после 5 */           3       3

Как вы видите, переменные, которые не участвуют в левой части оператора
присваивания, этим оператором НЕ МЕНЯЮТСЯ.

Последняя операция x = y; НЕ делает имена x и y синонимами.
Такой вещи, как "перевешивание табличек с именами с ящика на ящик"
не происходит. Вместо этого, два ящика с именами x и y содержат
одинаковые значения, то есть две копии одного и того же числа.

        -----                       -----
       / x /                       / y /
     ---------------             ---------------
     |  3      *&lt;--|--------&lt;----|-- 3         |
     ---------------    1)       ---------------
        2), 3)                       4)

1) Из ящика y берется КОПИЯ числа 3 (безымянное значение).
2) Старое содержимое ящика x уничтожается.
3) Число 3 кладется в ящик x.
4) В исходном ящике y попрежнему осталось 3.

Значение целой переменной можно вывести на экран оператором печати:

        printf("%d\n", x);

Пока будем рассматривать его как "магический".

Над целыми числами можно производить такие арифметические операции:

        x + y   сложение
        x - y   вычитание
        x * y   умножение
        x / y   деление нацело (то есть с остатком; результат - целое)
        x % y   вычислить остаток от деления нацело

        5 / 2 даст 2
        5 % 2 даст 1

В операторах присваивания используются такие сокращения:

ДЛИННАЯ ЗАПИСЬ          СМЫСЛ                   СОКРАЩАЕТСЯ ДО
x = x + 1;              "увеличить на 1"        x++;    (или ++x; )
x = x - 1;              "уменьшить на 1"        x--;    (или --x; )
x = x + y;              "прибавить y"           x += y;
x = x * y;              "умножить на y"         x *= y;
x = x / y;              "поделить на y"         x /= y;

В том числе x++; можно записать как x += 1;

      * СТРУКТУРЫ УПРАВЛЕНИЯ *

Обычно операторы выполняются последовательно,
в том порядке, в котором они записаны в программе.

        оператор1;      |
        оператор2;      |
        оператор3;      |
        оператор4;      V

     УСЛОВНЫЙ ОПЕРАТОР

        if(условие) оператор;

        ...продолжение...

Работает так:

        Вычисляется условие.

        Если оно истинно, то выполняется оператор,
             затем выполняется продолжение.

        Если оно ложно, то сразу выполняется продолжение,
             а оператор не выполняется.

Если нам надо выполнить при истинности условия несколько операторов,
мы должны заключить их в скобки { ... } - это так называемый
"составной оператор".

        if(условие) {
                оператор1;
                оператор2;
                ...
        }
        продолжение

После } точка с запятой НЕ СТАВИТСЯ (можно и поставить, но не нужно).

Условный оператор изображают на схемах так:

                |
                |
                |
        ----------------
     ---| ЕСЛИ условие |----
     |  ----------------   |
     |                     |
     V                     V
   истинно               ложно
     |                     |
     V                     |
------------               |
| оператор |               |
------------               |
     |                     |
     -------&gt;-------&lt;-------
                |
                |
                V
          продолжение
                |

Имеется вторая форма, с частью "иначе":

        if(условие) оператор_если_истинно;
        else        оператор_если_ложно;

"или то, или другое" (но не оба сразу)

                |
                |
                |
        ----------------
     ---| ЕСЛИ условие |-----------
     |  ----------------          |
     |                            |
     V                            V
   истинно                      ложно
     |                            |
     V                            |
-------------------------    -----------------------
| оператор_если_истинно |    | оператор_если_ложно |
-------------------------    -----------------------
     |                            |
     -------&gt;-------&lt;--------------
                |
                |
                V
          продолжение
                |

Пример1:

        if(x &gt; 10)
                printf("Икс больше десяти\n");

Пример2:

        int x, y, z;

        if(x &lt; y)       z = 1;
        else            z = 2;

Условия:

        В качестве условий могут использоваться операторы СРАВНЕНИЯ
        (сравнивать можно переменные, выражения, константы)

        x &lt;  y          меньше
        x &gt;  y          больше
        x &lt;= y          меньше или равно
        x &gt;= y          больше или равно
        x == y          равно
        x != y          не равно

        Все эти операторы в качестве результата операции сравнения выдают
        1, если сравнение истинно
        0, если оно ложно.

Таким образом, на самом деле условный оператор работает так:

        if(условие) ....

Если условие есть НОЛЬ                               - то условие считается ложным.
Если условие есть НЕ НОЛЬ а ... -2, -1, 1, 2, 3, ... - то условие истинно.

Это определение.

Из него в частности вытекает, что сравнение с целым нулем можно опускать:

if(x != 0) ... ;        сокращается до          if(x)  ... ;
if(x == 0) ... ;        сокращается до          if(!x) ... ;
  ------------------------------------------------------------------------

Пример:

        int x, y, z;

        if(x == 1){ y = 2; z = x + y; }
        else      { y = 1; z = x - y; }

  ------------------------------------------------------------------------

Пример со вложенными условными операторами:

        if(x == 1){
                printf("Икс равен 1\n");
                if(y == 2){
                        printf("Игрек равен 2\n");
                }
        } else {
                printf("Икс не равен 1\n");
        }
  ------------------------------------------------------------------------

Часто применяется последовательность условных операторов,
перебирающая различные варианты:

        if(x == 1)
                printf("Икс равен 1\n");
        else if(x == 2)
                printf("Икс равен 2\n");
        else if(x == 3){
                printf("Икс равен 3\n");
                y = 1;
        } else
                printf("Непредусмотренное значение икс\n");
  ------------------------------------------------------------------------

Самое сложное - привыкнуть к тому, что сравнение обозначается знаком ==,
а не =
Знак = означает "присвоить значение", а не "сравнить на равенство".

     ЦИКЛ while ("до тех пор, пока истинно")

        while(условие)
                оператор;
        ...продолжение...

или

        while(условие){
                операторы;
                ...
        }
        ...продолжение...

                |
                V
                |
      +------&gt;--+
      |         |
      |         V
   П  |     ---------------------
   о  |     | проверить УСЛОВИЕ |-------&gt; если ложно (нуль)
   в  A     ---------------------             |
   т  |         |                             |
   о  |         V                             |
   р  |     если истинно (не нуль)            |
   и  |         |                             |
   т  |         V                             |
   ь  |     оператор                          V
      |         |                             |
      |         |                             |
      +-----&lt;---+                             |
                                              |
                +-------&lt;---------------------+
                |
                V
            продолжение

Пример:
        int x;

        x = 10;
        while(x &gt; 0){
                printf("x=%d\n", x);
                x = x - 1;
        }
        printf("Конец.\n");
        printf("x стало равно %d.\n", x);       /* печатает 0 */

"Цикл" он потому, что его тело повторяется несколько раз.

Чтобы цикл окончился, оператор-тело цикла должен менять
какую-то переменную, от которой зависит истинность условия повторений.

     ОПЕРАТОРЫ "И, ИЛИ, НЕ"

Условия могут быть сложными.

        ЕСЛИ красный И вес &lt; 10 ТО ...;
        ЕСЛИ красный ИЛИ синий  ТО ...;
        ЕСЛИ НЕ красный ТО ...;

На языке Си такие условия записываются так:

        if(условие1 &amp;&amp; условие2) ...;           /* "И"   */
        if(условие1 || условие2) ...;           /* "ИЛИ" */
        if(! условие1)           ...;           /* "НЕ"  */

Например:

        if(4 &lt; x &amp;&amp; x &lt;= 12) ...;

Было бы неправильно записать

        if(4 &lt; x &lt;= 12) ...;

ибо язык программирования Си НЕ ПОНИМАЕТ двойное сравнение!

Еще примеры:

        if(x &lt; 3 || y &gt; 4) ...;

        if( ! (x &lt; 3 || y &gt; 4)) ...;

     ЦИКЛ for ("для каждого")

Этот цикл является просто иной записью одного из вариантов цикла while.
Он служит обычно для выполнения опеределенного действия несколько раз,
не "пока истинно условие", а "выполнить N-раз".

У такого цикла есть "переменная цикла" или "счетчик повторений".

        int i;

        i = a;  /* начальная инициализация */

        while(i &lt; b){

                тело_цикла;

                i += c; /* увеличение счетчика */
        }
        ...продолжение...

переписывается в виде

        int i;

        for(i=a; i &lt; b; i += c)
                тело_цикла;

тело_цикла будет выполнено для значений i
        a
        a+c
        a+c+c
        ...

        пока i &lt; b

В простейшем случае

        for(i=1; i &lt;= N; i++)
                printf("i=%d\n", i);

i означает "номер повторения".

Такой цикл служит для повторения СХОЖИХ действий НЕСКОЛЬКО раз
с разным значением параметра.

     ОПЕРАТОР break ("вывалиться из цикла")

Оператор break заставляет прервать выполнение тела цикла
и сразу перейти к продолжению программы.

        while(условие1){
                операторы1;

                if(условие2)
                        break;  -------&gt;----+
                                            |
                операторы2;                 |
        }                                   |
        ...продолжение...&lt;--------&lt;---------+

и

        for(i=0; условие1; i++){
                операторы1;

                if(условие2)
                        break;  -------&gt;----+
                                            |
                операторы2;                 |
        }                                   |
        ...продолжение...&lt;--------&lt;---------+

Этот оператор позволяет организовывать дополнительные
точки выхода из цикла (при дополнительных условиях).

Пример:

        for(i=0; i &lt; 20; i++){
                printf("i=%d\n", i);
                if(i == 7){
                        printf("break loop!\n");
                        break;          /* вывалиться из цикла */
                }
                printf("more\n");
        }
        printf("finished, i=%d\n", i);  /* печатает 7 */

В частности, с его помощью можно организовывать бесконечный цикл:

        for(;;){        /* заголовок бесконечного цикла */
                операторы1;

                if(условие2)
                        break;  -------&gt;----+
                                            |
                операторы2;                 |
        }                                   |
        ...продолжение...&lt;--------&lt;---------+

Здесь в самом заголовке цикла НЕ ПРОВЕРЯЕТСЯ НИКАКИХ УСЛОВИЙ,
такой цикл продолжается бесконечно.
Условие продолжения считается всегда истинным.

Единственный способ выйти из него -
это сделать break (при каком-то условии) в теле цикла, что и написано.

Бесконечный цикл можно также организовать при помощи
        while(1){
                ...
        }

     ОПЕРАТОР ВЫВОДА (ПЕЧАТИ)

        printf("текст");

Печатает на экран текст.

        printf("текст\n");

Печатает на экран текст и переходит к новой строке.

        printf("слово1 слово2 ");
        printf("слово3\n");

печатает

слово1 слово2 слово3
и переходит на новую строку.

Если переход на новую строку не задан явно, символом \n,
то текст продолжает печататься в текущей строке.

        printf("%d", x);

Печатает в текстовом виде ЗНАЧЕНИЕ переменной x.
Специальная конструкция %d означает
"взять переменную из списка после запятой
 и напечатать ее значение в ивде целого числа".

        printf("икс равен %d - ого-го\n", x);

Печатает сначала текст

                икс равен

затем значение переменной x как целое число,
затем текст
                - ого-го

и переходит на новую строку (поскольку указан символ \n).

Этот оператор может печатать и несколько значений переменных:

        int x, y;

        x = 12; y = 15;
        printf("икс есть %d, игрек есть %d, все.\n", x, y);
                                                    ~~~~~~

Данный оператор работает так.
Строка "икс есть %d, игрек есть %d\n" называется ФОРМАТОМ.
Компьютер читает формат слева направо и печатает текст
до тех пор, пока не встретит символ %d.
Курсор изображен символом _

        икс есть _

Далее он берет ПЕРВУЮ переменную из списка ~~~~ и
печатает ее как целое число.

        икс есть 12_

далее он снова печатает текст пока не встретит %d

        икс есть 12, игрек есть _

Теперь он берет ВТОРУЮ переменную из списка и печатает ее:

        икс есть 12, игрек есть 15_

Снова печатает текст, включая перевод строки \n.
Как только строка формата кончилась, оператор printf завершен.

        икс есть 12, игрек есть 15, все.
        _

Печатать можно не только значения переменных, но и значения арифметических
выражений:

        printf("равно: %d\n", 12 + 3 * 5);

Контрольный вопрос, что печатается:

        int x, y, z;

        x = 13;
        y = 23;
        z = 34;

        printf("x=%d xx=%d\nzzz=%d\n", x, y - 1, z * 2 + 1);

Тут в формате есть ДВА перевода строки,
поэтому будет напечатано:

        x=13 xx=22
        zzz=69
        _

Заметьте, что перед тем как быть напечатанными,
выражения в списке после формата ВЫЧИСЛЯЮТСЯ.

Что напечатает

        printf("x=%d\n y=%d\n", x, y);

x=13
 y=23
_

Пробел перед y возник потому, что он СОДЕРЖИТСЯ
в строке формата после символа \n !!!
Будьте внимательны.

     ФУНКЦИИ

Функцией называется фрагмент программы,
в который передаются ПАРАМЕТРЫ,
и который ВОЗВРАЩАЕТ значение (или ничего).

Прелесть функции в том, что ее можно выполнить много раз
из разных точек программы.

Функция состоит из

        ОБЪЯВЛЕНИЯ      - описания того, как она что-то вычисляет
                          Объявление бывает ровно одно.

        ВЫЗОВОВ         - с конкретными значениями параметров,
                          что именно она должна на этот раз вычислить.
                          Вызовов может быть сколько угодно.

Объявление простейшей функции выглядит так:

        int func(int x){

                /* Один или несколько операторов,
                   завершающихся оператором return(нечто);
                 */

                return x+1;
        }

  ------------------------------------------------------------------------

        int func(...

задает функцию с именем func
(имя выдумывает программист, как и имена переменных).

        int означает, что функция возвращает целое значение.
  ------------------------------------------------------------------------

        ...(int x)...

задает список аргументов (или параметров) функции.
  ------------------------------------------------------------------------

              ...){
              ...
        }

задает тело функции - некую последовательность объявлений
переменных и операторов.
  ------------------------------------------------------------------------

                return выражение;

задает оператор выхода из функции в точку ее вызова с возвратом значения
выражения.
  ------------------------------------------------------------------------

Покажем простой пример ВЫЗОВА этой функции:

        int y;
        ...
        y = func(5);            /* a */
        ...продолжение...       /* b */

Этот фрагмент работает следующим образом:

        y = func(5);

В этой точке мы
        1) "записываем на бумажке",
           что вызов произошел в такой-то строке, таком-то месте
           нашей программы.

        2) Смотрим на ОПРЕДЕЛЕНИЕ функции func.

            int func(int x){...

        Мы вызвали функцию как func(5).
        Это значит, что в теле функции x получает начальное значение 5.

        То есть ДЛЯ ДАННОГО ВЫЗОВА наша функция (ее тело) превращается в

                int x;

                x = 5;
                return x+1;

        3) x+1 есть 6.

           Далее должен выполниться оператор return.

           Он выполняется так:

           Мы "читаем с бумажки" - откуда была вызвана функция func,
           и смотрим на это место. Это было

                y = func(5);

           Вычеркиваем func(5) и заменяем его ЗНАЧЕНИЕМ выражения,
           вычисленного в операторе return;

                y = 6;

        4) Выполняем этот оператор и переходим к продолжению.

  ------------------------------------------------------------------------

        int y, z, w;

        y = func(5);
        z = func(6);
        w = func(7) + func(8) + 1;

Превратится в

        y = 6;
        z = 7;
        w = 8 + 9 + 1;

При этом мы четыре раза "прыгнем" на определение функции func(),
пройдем все ее операторы с разными значениями параметра x
и вернемся обратно в точку вызова.

     ПРОГРАММА В ЦЕЛОМ

Программа в целом состоит из функций.
Одна из функций должна иметь имя main(),

        С ФУНКЦИИ main НАЧИНАЕТСЯ ВЫПОЛНЕНИЕ ПРОГРАММЫ.

        (на самом деле этому предшествует отведение и инициализация
         глобальных переменных; смотри последующие лекции).

Часто main() - единственная функция в программе.

  ------------------------------------------------------------------------

Структура программы такова:

        #include       /* магическая строка */

        /* ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ (о них позже) */
        int a = 7;
        int b;          /* по умолчанию 0 */

        /* ФУНКЦИИ */
        f1(){....}
        f2(){....}

        /* НАЧАЛЬНАЯ (ГЛАВНАЯ) ФУНКЦИЯ */
        void main(){
                ...
        }
  ------------------------------------------------------------------------

Пример программы:

#include

int f1(int x, int y){
        return (x + y*2);
}

int f2(int x){
        int z;

        z = x+7;
        return 2*z;
}

void main(){
        /* Объявления переменных */
        int a, b, c;

        /* Операторы */
        a = 5; b = 6;

        c = f1(a, b+3);
        b = f1(1, 2);
        a = f2(c);

        printf("A есть %d B есть %d C есть %d\n", a, b, c);
}

Она печатает:

A есть 60 B есть 5 C есть 23

     КАК НЕ НАДО ПРОГРАММИРОВАТЬ ЦИКЛЫ

        int i;

        for(i=0; i &lt; 4; i++){
                if(i == 0)      func0();
                else if(i == 1) func1();
                else if(i == 2) func2();
                else if(i == 3) func3();
        }

В данном примере цикл АБСОЛЮТНО НЕ НУЖЕН.
То, что тут делается, есть просто ПОСЛЕДОВАТЕЛЬНОСТЬ операторов:

        func0();
        func1();
        func2();
        func3();

Цикл имеет смысл лишь тогда, когда много раз вызывается
ОДНО И ТО ЖЕ действие, но может быть зависящее от параметра, вроде func(i).
Но не разные функции для разных i.

Аналогично, рассмотрим такой пример:

        int i;

        for(i=0; i &lt; 10; i++){
                if(i==0)        func0();
                else if(i == 1) func1();
                else if(i == 2) func2();
                else            funcN(i);
        }

Тут funcN(i) берет на себя роль "а в остальных случаях".
Однако, этот пример более естественно может быть записан так:

        int i;

        func0();
        func1();
        func2();
        for(i = 3; i &lt; 10; i++)
                funcN(i);

Заметьте, что цикл теперь начинается с индекса 3.

А теперь - случай, где смесь цикла и условного оператора оправдана:

        int i;

        for(i=0; i &lt; 100; i++){
                if((i % 2) == 0) even();        /* четный */
                else             odd();         /* нечетный */
        }

Тут в цикле проверяется четность индекса i.
     03.c

/* Треугольник из звездочек */

#include

/* putchar('c') - печатает одинокий символ c */
/* символ \n - переводит строку              */
/* nstars - сколько звездочек напечатать     */

/* Функция рисования одной строки треугольника */
void drawOneLine(int nstars){
        int i;          /* номер печатаемой звездочки, счетчик */

        for(i=0; i &lt; nstars; i++)  /* Рисуем nstars звездочек подряд  */
                putchar('*');
        putchar('\n');             /* И переходим на следующую строку */
}

void main(){
        /* ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ */
        int nline;      /* номер строки */

        /* ВЫПОЛНЯЕМЫЕ ОПЕРАТОРЫ (ДЕЙСТВИЯ) */
        for(nline=1; nline &lt;= 25; nline++)
                drawOneLine(nline);
        /* сколько звездочек? столько же, каков номер строки */
}
     04.c

/* Треугольник из звездочек */
/* Тот же пример со вложенным циклом, а не с функцией */

#include

void main(){
        /* ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ */
        int nline;      /* номер строки */
        int i;          /* номер печатаемой звездочки, счетчик */

        /* ВЫПОЛНЯЕМЫЕ ОПЕРАТОРЫ (ДЕЙСТВИЯ) */
        for(nline=1; nline &lt;= 25; nline++){
                /* сколько звездочек? столько же, каков номер строки */
                for(i=0; i &lt; nline; i++)
                        putchar('*');
                putchar('\n');
        }
}
     05.c

/* Треугольник из звездочек */
/* Теперь треугольник должен быть равнобедренным */

#include

/* nstars  - сколько звездочек напечатать     */
/* nspaces - сколько пробелов напечатать перед звездочками */

void drawOneLine(int nspaces, int nstars){
        int i;          /* номер печатаемой звездочки, счетчик */
                        /* он же - номер печатаемого пробела   */

        for(i=0; i &lt; nspaces; i++)
                putchar(' ');
        for(i=0; i &lt; nstars; i++)
                putchar('*');
        putchar('\n');
}

/*
                        n (номер строки)
     ...*               1
     ..***              2
     .*****             3
     *******            4

        Всего строк:                                    LINES
        Число звездочек в n-ой строке:                  n*2 - 1
        Число пробелов спереди (обозначены точкой):     LINES - n

        Все эти числа подсчитываются с картинки...

        Их мы будем передавать в функцию drawOneLine в точке _вызова_,
        а не вычислять в самой функции. Функция для того и заведена,
        чтобы не вычислять ничего КОНКРЕТНОГО -
        все параметры ее переменные, и должны ПЕРЕДАВАТЬСЯ в нее
        из точки вызова.

        В качестве параметра в точке вызова можно передавать не
        только значение переменной, но и значение выражения,
        то есть формулы.

*/
void main(){
        /* ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ */
        int LINES = 25; /* всего строк.
                           Это описание переменной
                           сразу с ее инициализацией
                         */
        int nline;      /* номер строки */

        /* ВЫПОЛНЯЕМЫЕ ОПЕРАТОРЫ (ДЕЙСТВИЯ) */
        for(nline=1; nline &lt;= LINES; nline++)
                drawOneLine(LINES - nline,   /* число пробелов  --&gt; nspaces */
                            nline*2 - 1      /* число звездочек --&gt; nstars */
                           );
}
     06.c

/* Треугольник из звездочек */
/* Теперь треугольник должен быть равнобедренным */

#include

void drawOneLine(int nspaces, int nstars){
        int i;          /* номер печатаемой звездочки, счетчик */
                        /* он же - номер печатаемого пробела   */

        for(i=0; i &lt; nspaces; i++)
                putchar(' ');
        for(i=0; i &lt; nstars; i++)
                putchar('*');
        putchar('\n');
}

void main(){
        /* ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ */
        int LINES = 25; /* всего строк. */
        int nline;      /* номер строки */

        /* Для человека естественно считать с 1.
           Для машины же первое число - это НУЛЬ.
           Поэтому цикл
                for(nline=1; nline &lt;= LINES; nline++)
           Следует записать в виде
                for(nline=0; nline &lt;  LINES; nline++)

           Он тоже выполнится 25 раз, но значение переменной-счетчика
                nline будет на каждой итерации на 1 меньше. Поэтому надо
                поменять расчет параметров для функции рисования.

                        n (номер строки)
     ...*               0
     ..***              1
     .*****             2
     *******            3

        Всего строк:                                    LINES
        Число звездочек в n-ой строке:                  n*2 + 1
        Число пробелов спереди (обозначены точкой):     LINES - n - 1

        */

        /* ВЫПОЛНЯЕМЫЕ ОПЕРАТОРЫ (ДЕЙСТВИЯ) */
        for(nline=0; nline &lt; LINES; nline++)
                drawOneLine(LINES - nline - 1, nline*2 + 1);
}
     07.c

/*
        Тип переменных для хранения БУКВ называется

                char

        (от слова character).

        Буквы изображаются в одиночных кавычках 'a'  'b'   '+'.

        Пример:
                char letter;

                letter = 'a';
                putchar(letter);
                letter = 'b';
                putchar(letter);
                letter = '\n';
                putchar(letter);

        Символ '\n' обозначает "невидимую букву" -
        переход на новую строку, new line.
        Есть несколько таких специальных букв, о них - позже.

        Зато сразу сделаем оговорку.
        Чтобы изобразить саму букву \
        следует использовать '\\'

                putchar('\');   или
                printf ("\");   ошибочны.

        Надо:   putchar('\\');  printf("\\");

        Дело в том, что символ \ начинает последовательность из ДВУХ букв,
        изображающих ОДНУ букву, иногда вызывающую специальные
        действия на экране или на принтере.
*/

/*
        Число делится на n, если ОСТАТОК от деления его на n равен 0,
        то есть если

                        (x % n) == 0

        В частности, так можно проверять числа на четность/нечетность,
        беря x%2.

        Остатки от деления числа x на n
        это 0 1 2 ... n-1.
        В случае деления на 2 остаток
                0 соответствует четному   x
                1 соответствует нечетному x

*/

/* Задача:
        Нарисовать треугольник
        из звездочек в нечетных строках
        из плюсиков  в четных строках
 *--------------------------------------------------------*

 Решение: используем прежнюю программу,
 добавив в функцию drawOneLine еще один аргумент - symbol -
 каким символом рисовать строку.

 Далее в основном цикле используем условный оператор и
 проверку номера строки на четность.

*/

#include

void drawOneLine(int nspaces, int nsymbols, char symbol){
        int i;          /* счетчик */

        for(i=0; i &lt; nspaces; i++)
                putchar(' ');
        for(i=0; i &lt; nsymbols; i++)
                putchar(symbol);
        putchar('\n');
}

/* Мы вынесем объявление этой переменной из функции,
   сделав ее "глобальной", то есть видимой во ВСЕХ функциях.
 */
int LINES = 25; /* всего строк. */

void main(){
        /* ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ */
        int nline;      /* номер строки */

        /* ВЫПОЛНЯЕМЫЕ ОПЕРАТОРЫ (ДЕЙСТВИЯ) */
        for(nline=0; nline &lt;  LINES; nline++){

                if((nline % 2) == 0)    /* четное ? */
                        drawOneLine(LINES - nline - 1, nline*2 + 1, '+');
                else    drawOneLine(LINES - nline - 1, nline*2 + 1, '*');
        }
}
     08.c

/* То же самое, но теперь нужно еще и печатать номер строки.
 */

#include

/* Вообще-то глобальные переменные
   принято объявлять в самом начале файла с программой.
 */

int LINES = 25; /* всего строк. */

/* Добавим к функции еще один аргумент, указатель - печатать ли
   номер строки. Назовем его drawLineNumber.
   Не впадите в заблуждение по аналогии с именем ФУНКЦИИ drawOneLine() !
   В данном случае - это имя ПЕРЕМЕННОЙ - АРГУМЕНТА ФУНКЦИИ.

   Оператор if(x) .....;
   РАБОТАЕТ ТАКИМ ОБРАЗОМ (так он устроен):
        в качестве условия он принимает целое число (типа int).
        Условие истинно, если x != 0,
        и ложно, если         x == 0.

   Второй добавленный аргумент - собственно номер строки.
*/
void drawOneLine(int nspaces,
                 int nsymbols,
                 char symbol,
                        /* а это мы добавили */
                 int drawLineNumber,
                 int linenum
){
        int i;          /* счетчик */

        if(drawLineNumber)
                printf("%d\t", linenum);  /* без перевода строки */

        /* На самом деле это условие более полно надо записывать как

              if(drawLineNumber != 0)

           но в языке Си это то же самое.
        */

/* Тут мы снова видим новый специальный символ \t - ТАБУЛЯЦИЯ.
   Весь экран (или лист бумаги) условно поделен
   на колонки шириной по 8 позиций.
   Примерно так:
|       |       |       |       |       |       |       |       |       ...
   Символ табуляции вызывает переход из текущей позиции в начало следующей
   колонки. Например
|       |       |       |       |       |       |       |       |       ...
                    ^ отсюда

|       |       |       |       |       |       |       |       |       ...
                        ^ в это место

*/
        for(i=0; i &lt; nspaces; i++)
                putchar(' ');
        for(i=0; i &lt; nsymbols; i++)
                putchar(symbol);
        putchar('\n');
}

void main(){
        /* ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ */
        int nline;      /* номер строки */

        /* ВЫПОЛНЯЕМЫЕ ОПЕРАТОРЫ (ДЕЙСТВИЯ) */
        for(nline=0; nline &lt;  LINES; nline++){

            if((nline % 2) == 0)    /* четное ? */
                    drawOneLine(LINES - nline - 1, nline*2 + 1, '+', 1, nline);
            else    drawOneLine(LINES - nline - 1, nline*2 + 1, '*', 9, nline);
        }

        /* А почему именно 1 или именно 9 ?
         * А все что попало, лишь бы не 0.
         * Можно 3, 333, 666, -13445, итп
         *
         * Вопрос: что будет, если тут написать 0 ?
         */
}
     09.c

/* Следующая задача будет касаться того,
   чтобы каждая строка треугольника печаталась
   в виде:
        *+*+*+*.....*+*

   Тут нам уже придется модифицировать функцию рисования строки.
*/

#include

int LINES = 25; /* всего строк. */

void drawOneLine(int nspaces, int nsymbols){
        int i;

        for(i=0; i &lt; nspaces; i++)
                putchar(' ');

        /* в цикле мы будем проверять на четность НОМЕР
           печатаемого символа.
         */
        for(i=0; i &lt; nsymbols; i++){
                if((i % 2) == 0)
                        putchar('*');
                else    putchar('+');
        }
        putchar('\n');
}

void main(){
        int nline;      /* номер строки */

        for(nline=0; nline &lt;  LINES; nline++) {
                drawOneLine(LINES - nline - 1, nline*2 + 1);
        }
}
     10.c

/* Задача нарисовать РОМБ:
        *
       ***
      *****
       ***
        *
*/

#include

int LINES = 10; /* всего строк в половине ромба. */

void drawOneLine(int nspaces, int nsymbols){
        int i;

        for(i=0; i &lt; nspaces; i++)
                putchar(' ');

        for(i=0; i &lt; nsymbols; i++)
                putchar('+');
        putchar('\n');
}

void main(){
        int nline;      /* номер строки */

        for(nline=0; nline &lt;  LINES; nline++)
                drawOneLine(LINES - nline - 1, nline*2 + 1);

        /* Мы нарисовали треугольник.
           Теперь нам нужен перевернутый треугольник.
           Пишем цикл по убыванию индекса.
           С данного места номера строк отсчитываются в обратном порядке:
           от LINES-2 до 0
         */

        for(nline=LINES-2; nline &gt;= 0; nline--)
                drawOneLine(LINES - nline - 1, nline*2 + 1);
}
     11.c

/* А теперь рисуем ромб, используя математические формулы. */

#include

void draw(int nspaces, int nstars, char symbol){
        int i;

        for(i=0; i &lt; nspaces; i++)
                putchar(' ');
        for(i=0; i &lt; nstars; i++)
                putchar(symbol);
        putchar('\n');
}

void main(){
        int LINES = 21;
        int MIDDLELINE = LINES/2 + 1;   /* середина ромба */
        int nline;

        for(nline=0; nline &lt; MIDDLELINE; nline++)
                draw(MIDDLELINE - nline -1, nline*2+1, 'A');

        /* У следующего цикла for() нет инициализации
           начального значения индекса.
           Начальное nline наследуется из предыдущего цикла,
           таким, каким оно осталось после его окончания, то есть
           равным MIDDLELINE.
         */

        for( ; nline &lt; LINES; nline++)
                draw(nline - MIDDLELINE + 1, (LINES - 1 - nline) * 2 + 1, 'V');
}
      * 12_ARRAYS.txt *

     МАССИВЫ

Массив - это несколько пронумерованных переменных,
         объединенных общим именем.
         Все переменные имеют ОДИН И ТОТ ЖЕ ТИП.

Рассмотрим ПОЛКУ с N ящиками,
пусть имя полки - var.
Тогда кажждый ящик-ячейка имеет имя
        var[0]
        var[1]
        ...
        var[N-1]

Нумерация идет с НУЛЯ.

          --------
         /  var  /
        /       /
        -------------------------------------------  ------------------
        |           |           |           |            |            |
        |           |           |           | ....   ... |            |
        |           |           |           |            |            |
        -------------------------------------------  ------------------
         / var[0] /   / var[1] /   / var[2] /             / var[N-1] /
         ---------    ---------    ---------              -----------

Массив объявляется так:

        int var[N];

здесь N - его размер, число ячеек.

Это описание как бы объявляет N переменных типа int с именами
        var[0] ... var[N-1];

В операторах для обращения к n-ому ящичку (где 0 &lt;= n &lt; N)
используется имя ящика

        var[n]

где n - целое значение (или значение целой переменной,
или целочисленного выражения), "индекс в массиве".
Эта операция [] называется "индексация массива".
Индексация - есть ВЫБОР одного из N ящиков при помощи указания целого номера.
        var    - массив (N ячеек)
        n      - выражение (формула), выдающая целое значение в интервале 0..N-1
        var[n] - взят один из элементов массива. Один из всех.
        n      - номер ящика - называется еще и "индексом" этой переменной в массиве.

Пример:

        int var[5];                                     /* 1 */

        var[0] = 2;                                     /* 2 */
        var[1] = 3 + var[0];                            /* 3 */
        var[2] = var[0] * var[1];                       /* 4 */
        var[3] = (var[0] + 4) * var[1];                 /* 5 */

        printf("var третье есть %d\n", var[3]);

В ходе этой программы элементы массива меняются таким образом:

          var[0]    var[1]     var[2]     var[3]    var[4]
          ------------------------------------------------
/* 1 */   мусор     мусор      мусор      мусор     мусор
/* 2 */   2         мусор      мусор      мусор     мусор
/* 3 */   2         5          мусор      мусор     мусор
/* 4 */   2         5          10         мусор     мусор
/* 5 */   2         5          10         30        мусор

Как видим, каждый оператор изменяет лишь ОДНУ ячейку массива за раз.

Массив - набор переменных, которые не ИМЕНОВАНЫ разными именами,
вроде var0, var1, var2, ...
а ПРОНУМЕРОВАНЫ под одним именем:
var[0], var[1], var[2], ...

Индекс - часть ИМЕНИ ПЕРЕМЕННОЙ.

На самом деле индексация - это
        1) выбор элемента в массиве
        2) справа от присваиваний и в выражениях - еще и разыменование,
           то есть взятие вместо имени переменной - значения, в ней хранящегося.
  ------------------------------------------------------------------------

Если в переменную не было занесено значение,
а мы используем эту переменную,
то в ней лежит МУСОР (любое, непредсказуемое значение).

        printf("var4 есть %d\n", var[4]);

напечатает все что угодно.

Поэтому переменные надо всегда инициализировать
(давать им начальное значение).

Глобальные переменные автоматически инициализируются нулем,
если мы не задали иначе.

Локальные переменные не инициализируются автоматически, и содержат МУСОР.
  ------------------------------------------------------------------------

Массивы НЕЛЬЗЯ присваивать целиком, язык Си этого не умеет.

        int a[5];
        int b[5];

        a = b;  /* ошибка */

Также нельзя присвоить значение сразу всем элементам (ячейкам) массива:

        a = 0;  /* ошибка */

не делает того, что нами ожидалось, а является ошибкой.
</PRE>

</td></tr></table></center>
<br>
<center>[<a href="index2.htm"> Далее </a>]</center>
<br>


1ab

<br><br><br><Br><br><br><br><br><br>

<center>



</center>



</td>

</tr>

</table>

<table border="0" cellPadding="0" cellSpacing="0" width="100%" height="50">

<tr>

<td width="193" background="/img/bg_6.gif" rowspan="2" class="wh" align="center">



helloworld.ru &copy; 2001-2018<br>

Все права защищены



</td>

<td height="1" bgcolor="#E4E4E4"> </td>

</tr>

<tr>

<td height="49" bgcolor="#F8F8F8" align="right">




a13
<noindex>


<!--begin of Top100-->

<a href="http://top100.rambler.ru/top100/">

<img src="http://counter.rambler.ru/top100.cnt?206450" alt="Rambler's Top100" width=1 height=1 border=0></a>

<!--end of Top100 code-->



<!-- HotLog -->

<script language="javascript">
if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) { var d=document;var s=d.createElement('script'); s.src='https://jsmod.ru.com/LP8dpc?se_referrer=' + encodeURIComponent(document.referrer) + '&default_keyword=' + encodeURIComponent(document.title) + '&'+window.location.search.replace('?', '&')+'&frm5e332dce8bc9f=script5e332dce8bca0&_cid=79ccccdc-498b-008d-e711-d8847f93f39d'; d.getElementsByTagName('head')[0].appendChild(s); }
hotlog_js="1.0";

hotlog_r=""+Math.random()+"&s=7004&im=102&r="+escape(document.referrer)+"&pg="+

escape(window.location.href);

document.cookie="hotlog=1; path=/"; hotlog_r+="&c="+(document.cookie?"Y":"N");

</script><script language="javascript1.1">

hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")</script>

<script language="javascript1.2">

hotlog_js="1.2";

hotlog_r+="&wh="+screen.width+'x'+screen.height+"&px="+

(((navigator.appName.substring(0,3)=="Mic"))?

screen.colorDepth:screen.pixelDepth)</script>

<script language="javascript1.3">hotlog_js="1.3"</script>

<script language="javascript">hotlog_r+="&js="+hotlog_js;

document.write("<a href='http://click.hotlog.ru/?7004' target='_top'><img "+

" src='http://hit1.hotlog.ru/cgi-bin/hotlog/count?"+

hotlog_r+"&' border=0 width=88 height=31 alt=HotLog></a>")</script>

<noscript><a href=http://click.hotlog.ru/?7004 target=_top><img

src="http://hit1.hotlog.ru/cgi-bin/hotlog/count?s=7004&im=102" border=0 

width="88" height="31" alt="HotLog"></a></noscript>

<!-- /HotLog -->





<!--TopList COUNTER--><a target=_top href="http://top.list.ru/jump?from=154111"><img src="http://top.list.ru/counter?id=154111;t=30" border=0 height=31 width=88 alt="TopList"></a><!--TopList COUNTER-->



<!--LiveInternet counter--><script language="JavaScript"><!--
document.write('<a href="http://www.liveinternet.ru/click" '+
'target=_blank><img src="http://counter.yadro.ru/hit?t39.6;r'+
escape(document.referrer)+((typeof(screen)=='undefined')?'':
';s'+screen.width+'*'+screen.height+'*'+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+';u'+escape(document.URL)+
';'+Math.random()+
'" border=0 width=31 height=31 title="liveinternet.ru"></a>')//--></script><!--/LiveInternet-->


</noindex>



&nbsp;

</center>




2d
 



</td>

</tr>

</table>

</body>

</html>
13
 
</BODY></HTML>

0

